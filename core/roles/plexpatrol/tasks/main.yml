---
- name: Server ID
  shell: 'cat /var/mhs/state/pg.serverid'
  register: serverid

- name: Set plex.user fact | token
  shell: 'cat /var/mhs/state/plexpatrol/plex.token'
  register: plex_auth_token

- name: Recall User
  shell: 'cat /var/mhs/state/plexpatrol/plex.user'
  register: user

- name: Register IP
  shell: 'cat /var/mhs/state/server.ip'
  register: ipaddress

- name: Multiple IPs Info
  shell: 'cat /var/mhs/state/plexpatrol/multiple.ips'
  register: multipleips

- name: Kick Video Transcodes
  shell: 'cat /var/mhs/state/plexpatrol/video.transcodes'
  register: videotranscodes

- name: Kick 4k Transcodes
  shell: 'cat /var/mhs/state/plexpatrol/video.transcodes4k'
  register: video4k

- name: Kick Audio Transcodes
  shell: 'cat /var/mhs/state/plexpatrol/audio.transcodes'
  register: audiotranscodes

- name: check interval
  shell: 'cat /var/mhs/state/plexpatrol/check.interval'
  register: checkinterval

- name: Paused Info
  shell: 'cat /var/mhs/state/plexpatrol/kick.minutes'
  register: kickminutes

- name: Display Plex Auth Token
  debug:
    msg: "Plex Auth Token: {{ plex_auth_token.stdout }}"

- name: Remove old Install
  shell: 'sudo rm -rf /opt/mhs/apps-data/plexpatrol'

- name: Create plexpatrol directories
  file: "path={{ item }} state=directory mode=0775 owner=1000 group=1000 recurse=yes"
  with_items:
    - /opt/mhs/apps-data/plexpatrol

- name: Clone plexpatrol == HEAD
  git:
    repo: https://github.com/l3uddz/plex_patrol.git
    dest: /opt/mhs/apps-data/plexpatrol
    clone: yes
    version: HEAD
    force: yes
  ignore_errors: yes

- name: Clone plexpatrol repo == master
  git:
    repo: https://github.com/l3uddz/plex_patrol.git
    dest: /opt/mhs/apps-data/plexpatrol
    clone: yes
    version: master
    force: yes
  ignore_errors: yes

- name: Install pip requirements
  pip:
    requirements: /opt/mhs/apps-data/plexpatrol/requirements.txt
    executable: pip3

- name: Check config exists
  stat:
    path: "/opt/mhs/apps-data/plexpatrol/settings.ini"
  register: plexpatrol_config

- name: Import default config
  template:
    src: settings.ini.j2
    dest: /opt/mhs/apps-data/plexpatrol/settings.ini
    owner: '1000'
    group: '1000'
    mode: 0775
    force: no
  when: not plexpatrol_config.stat.exists

- name: Set patrol.py as executable
  file:
    path: /opt/mhs/apps-data/plexpatrol/patrol.py
    owner: '1000'
    group: '1000'
    mode: a+x

- name: Check Service's Existance
  stat:
    path: '/etc/systemd/system/plexpatrol.service'
  register: pgp

- name: Stop service
  service:
    name: plexpatrol
    state: stopped
  when: pgp.stat.exists

- name: Plex Patrol Service
  template:
    src: plexpatrol.service
    dest: /etc/systemd/system/plexpatrol.service
    force: yes

- name: Daemon-Reload
  systemd: state=stopped name=plexpatrol daemon_reload=yes enabled=no

- name: Start Plex Patrol
  systemd: state=started name=plexpatrol enabled=yes

# scripts permissions
- name: 'Setting permissions on scripts'
  shell: 'chown -cR 1000:1000 /opt/mhs/apps-data/plexpatrol'

# scripts permissions
- name: 'Setting permissions on scripts'
  shell: 'chmod -cR 775 /opt/mhs/apps-data/plexpatrol'

- name: Remove .githube folder and .git files
  file: "path={{ item }} state=absent"
  with_items:
    - '/opt/mhs/apps-data/plexpatrol/.git'
    - '/opt/mhs/apps-data/plexpatrol/.github'
    - '/opt/mhs/apps-data/plexpatrol/assets'
    - '/opt/mhs/apps-data/plexpatrol/.gitignore'
