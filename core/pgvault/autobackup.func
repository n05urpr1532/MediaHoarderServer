#!/usr/bin/env bash

runningcheck() {
  initial2
  runcheck5=$(docker ps | grep ${program_var})
  if [[ "$runcheck5" != "" ]]; then running=1; else running=0; fi
}

initial() {
  rm -rf /var/mhs/state/pgvault.output 1> /dev/null 2>&1
  rm -rf /var/mhs/state/pgvault.buildup 1> /dev/null 2>&1
  rm -rf /var/mhs/state/program.temp 1> /dev/null 2>&1
  rm -rf /var/mhs/state/app.list 1> /dev/null 2>&1
  rm -rf /var/mhs/state/pgvault.output 1> /dev/null 2>&1
  touch /var/mhs/state/pgvault.output
  touch /var/mhs/state/program.temp
  touch /var/mhs/state/app.list
  touch /var/mhs/state/pgvault.buildup
  touch /var/mhs/state/pgvault.output
  touch /var/mhs/state/rclone.size
  space=$(cat /var/mhs/state/data.location)
  # To Get Used Space
  used=$(df -h /opt/mhs/etc/mhs | tail -n +2 | awk '{print $3}')
  # To Get All Space
  capacity=$(df -h /opt/mhs/etc/mhs | tail -n +2 | awk '{print $2}')
  # Percentage
  percentage=$(df -h /opt/mhs/etc/mhs | tail -n +2 | awk '{print $5}')
}

initial2() {
  path=$(cat /var/mhs/state/server.hd.path)
  tarlocation=$(cat /var/mhs/state/data.location)
  program_size=$(cat /var/mhs/state/rclone.size)
  program_var=$(cat /tmp/program_var)
  server_id=$(cat /var/mhs/state/server.id)
}

final() {
  echo
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  read -r -p '✅ Process Complete! | PRESS [ENTER] ' typed < /dev/tty
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  bash /opt/mhs/lib/backup-and-restore/pgvault.sh
  exit
}

queued() {
  echo
  read -r -p "⛔️ ERROR - $typed Already Queued! | Press [ENTER] " typed < /dev/tty
}

badserver() {
  echo
  read -r -p '⛔️ ERROR - Type an Exact Server Name | Press [ENTER] ' typed < /dev/tty
}

#not used yet
rclonelist() {
  ls -l /mnt/gdrive/mhs/backup | grep "^d" | awk '{print $9}' > pgvault.serverlist
}

pgboxrecall() {
  ls -p /opt/mhs/lib/apps-core | grep -v / > /var/mhs/state/pgvault.apprecall
  while read p; do
    sed -i "/^$p\b/Id" /var/mhs/state/pgvault.apprecall
  done < /opt/mhs/lib/backup-and-restore/exempt.list

  while read p; do
    sed -i "/^$p\b/Id" /var/mhs/state/pgvault.apprecall
    basename "$p" .yml >> /var/mhs/state/pgvault.apprecall
  done < /var/mhs/state/pgvault.apprecall
}

mathprime() {
  ### List Out Apps In Readable Order (One's Not Installed)
  num=0
  rm -rf /var/mhs/state/program.temp 1> /dev/null 2>&1
  while read p; do
    echo -n $p >> /var/mhs/state/program.temp
    echo -n " " >> /var/mhs/state/program.temp
    num=$((num + 1))
    if [ "$num" == 7 ]; then
      num=0
      echo " " >> /var/mhs/state/program.temp
    fi
  done < /var/mhs/state/pgvault.apprecall
}

################################################ FOR BACKUP - START
apprecall() {
  tree -d -L 1 /opt/mhs/apps-data | awk '{print $2}' | tail -n +2 | head -n -2 > /var/mhs/state/pgvault.apprecall
  while read p; do
    sed -i "/^$p\b/Id" /var/mhs/state/pgvault.apprecall
  done < /opt/mhs/lib/backup-and-restore/exempt.list

  ### Blank Out Temp List
  rm -rf /var/mhs/state/program.temp && touch /var/mhs/state/program.temp
  mathprime
}

buildup() {
  echo "$typed" >> /var/mhs/state/pgvault.buildup
  sed -i "/^$typed\b/Id" /var/mhs/state/pgvault.apprecall

  num=0
  rm -rf /var/mhs/state/pgvault.output 1> /dev/null 2>&1
  while read p; do
    echo -n $p >> /var/mhs/state/pgvault.output
    echo -n " " >> /var/mhs/state/pgvault.output
    if [ "$num" == 7 ]; then
      num=0
      echo " " >> /var/mhs/state/pgvault.output
    fi
  done < /var/mhs/state/pgvault.buildup

  mathprime
  vaultbackup
}
################################################ FOR BACKUP - END
serverprime() {
  tree -d -L 1 /mnt/gdrive/mhs/backup | awk '{print $2}' | tail -n +2 | head -n -2 > /tmp/server.list

  ### List Out Apps In Readable Order (One's Not Installed)
  num=0
  rm -rf /var/mhs/state/program.temp 1> /dev/null 2>&1
  while read p; do
    echo -n $p >> /var/mhs/state/program.temp
    echo -n " " >> /var/mhs/state/program.temp
    num=$((num + 1))
    if [ "$num" == 7 ]; then
      num=0
      echo " " >> /var/mhs/state/program.temp
    fi
  done < /tmp/server.list

  servers=$(cat /var/mhs/state/program.temp)
  server_id=$(cat /var/mhs/state/server.id)

  tee <<- EOF

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🚀 Vault ~ Server Recall
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📂 Current [${server_id}] & Prior Servers Detected:

$servers

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[Z] Exit
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

EOF
  read -r -p '🌍 Type Server Name | Press [ENTER]: ' server < /dev/tty
  echo $server > /tmp/server.select

  if [[ "$server" == "exit" || "$server" == "Exit" || "$server" == "EXIT" || "$server" == "z" || "$server" == "Z" ]]; then exit; fi

  current2=$(cat /tmp/server.list | grep "\<$server\>")
  if [ "$current2" == "" ]; then
    badserver
    serverprime
  fi

  tempserver=$server
  ls -l /mnt/gdrive/mhs/backup/$tempserver | awk '{print $9}' | tail -n +2 > /var/mhs/state/pgvault.restoreapps

  ### Blank Out Temp List
  rm -rf /var/mhs/state/pgvault.apprecall 1> /dev/null 2>&1
  touch /var/mhs/state/pgvault.apprecall

  while read p; do
    basename "$p" .tar >> /var/mhs/state/pgvault.apprecall
  done < /var/mhs/state/pgvault.restoreapps

  ### Blank Out Temp List
  rm -rf /var/mhs/state/program.temp 1> /dev/null 2>&1
  touch /var/mhs/state/program.temp
  mathprime
}

buildup2() {
  echo "$typed" >> /var/mhs/state/pgvault.buildup
  sed -i "/^$typed\b/Id" /var/mhs/state/pgvault.apprecall

  num=0
  rm -rf /var/mhs/state/pgvault.output 1> /dev/null 2>&1
  while read p; do
    echo -n $p >> /var/mhs/state/pgvault.output
    echo -n " " >> /var/mhs/state/pgvault.output
    if [ "$num" == 7 ]; then
      num=0
      echo " " >> /var/mhs/state/pgvault.output
    fi
  done < /var/mhs/state/pgvault.buildup

  mathprime
  vaultrestore
}
################################################ FOR RESTORE - START

################################################ FOR RESTORE - END

######################################################## START - PG Vault Backup

backup_all_start() {

  while read p; do
    tee <<- EOF

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
 Vault - Backing Up: $p
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

EOF

    sleep 2.5

    # Store Used Program
    echo $p > /tmp/program_var
    # Execute Main Program
    backup_process

    sleep 2
  done < /var/mhs/state/pgvault.apprecall
  final
}

backup_start() {
  while read p; do
    tee <<- EOF

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Vault - Backing Up: $p
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

EOF

    sleep 2.5

    # Store Used Program
    echo $p > /tmp/program_var
    # Execute Main Program
    backup_process

    sleep 2
  done < /var/mhs/state/pgvault.buildup
  final
}

backup_process() {
  initial2
  ##### Stop Docker Container if Running
  runningcheck
  if [[ "$running" == "1" ]]; then
    tee <<- EOF

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
↘️  Stopping Docker Container - $program_var
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

EOF
    sleep 1
    docker stop $program_var 1> /dev/null 2>&1
  fi

  ###### Start the Backup Process - Backup Locally First
  tee <<- EOF

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
↘️  Zipping Data Locally - $program_var
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

EOF

  path=$(cat /var/mhs/state/server.hd.path)
  tarlocation=$(cat /var/mhs/state/data.location)
  server_id=$(cat /var/mhs/state/server.id)

  tar \
  --warning=no-file-changed --ignore-failed-read --absolute-names --warning=no-file-removed \
  --exclude-from=/opt/mhs/lib/backup-and-restore/exclude.list \
  -C /opt/mhs/apps-data/${program_var} -cvf ${tarlocation}/${program_var}.tar ./

  ##### Restart Docker Application if was Running Prior
  if [[ "$running" == "1" ]]; then
    tee <<- EOF
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
↘️  Restarting Docker Application - $program_var
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

EOF
    sleep 2
    docker restart $program_var 1> /dev/null 2>&1
  fi

  ###### Backing Up Files to GDrive
  tee <<- EOF

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
↘️  Sending Zipped Data to Google Drive - $program_var
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

EOF
  useragent="$(cat /var/mhs/state/uagent)"
  bwlimit="$(cat /var/mhs/state/blitz.bw)"

  vfs_dcs="$(cat /var/mhs/state/vfs_dcs)"
  vfs_mt="$(cat /var/mhs/state/vfs_mt)"
  vfs_t="$(cat /var/mhs/state/vfs_t)"
  vfs_c="$(cat /var/mhs/state/vfs_c)"

  rclone --config /opt/mhs/etc/rclone/rclone.conf mkdir gdrive:/mhs/backup/${server_id} 1> /dev/null 2>&1

  rclone moveto ${tarlocation}/${program_var}.tar \
  gdrive:/mhs/backup/${server_id}/${program_var}.tar \
  --config /opt/mhs/etc/rclone/rclone.conf \
  -v --checksum --stats-one-line --stats 1s --progress \
  --tpslimit=10 \
  --checkers="$vfs_c" \
  --transfers="$vfs_t" \
  --no-traverse \
  --fast-list \
  --bwlimit="$bwlimit" \
  --drive-chunk-size="$vfs_dcs" \
  --user-agent="$useragent"

  ##### Remove File Incase
  rm -rf ${tarlocation}/${program_var}.tar 1> /dev/null 2>&1
}
